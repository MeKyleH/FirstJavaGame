package com.whoiskyleholt.entity.particle;

import com.whoiskyleholt.entity.Entity;
import com.whoiskyleholt.graphics.Screen;
import com.whoiskyleholt.graphics.Sprite;

public class Particle extends Entity {

	// declares variables for later use
	private Sprite sprite;
	private int life;
	private int time = 0;

	protected double xx, yy, zz;
	protected double xa, ya, za;

	// allows for individual particle creation
	public Particle(int x, int y, int life) {
		this.x = x;
		this.y = y;
		this.xx = x;
		this.yy = y;
		this.life = life + random.nextInt(50) - 25;
		sprite = Sprite.particle_normal;

		// creates a random distribution for the particles to move

		this.xa = random.nextGaussian();

		this.ya = random.nextGaussian();
		this.zz = random.nextFloat() + 2;
	}

	// animates particles
	public void update() {
		time++;
		if (time >= 10000) time = 0;
		if (time > life) remove(); // removes after it has passed its lifetime
		za -= 0.1;

		if (zz < 0) {
			zz = 0;
			za *= -0.55;
			xa *= 0.4;
			ya *= 0.4;
		}

		move(xx + xa, (yy + ya) + (zz + za));
	}

	private void move(double x, double y) {
		if (collision(x, y)) {
			this.xa *= -0.5;
			this.ya *= -0.5;
			this.za *= -0.5;

		}
		this.xx += xa;
		this.yy += ya;
		this.zz += za;

	}

	public boolean collision(double x, double y) {
		boolean solid = false;
		for (int c = 0; c < 4; c++) {
			double xt = (x - c % 2 * 16) / 16;
			double yt = (y - c / 2 * 16) / 16;
			int ix = (int) Math.ceil(xt);
			int iy = (int) Math.ceil(yt);
			if (c % 2 == 0) ix = (int) Math.floor(xt);
			if (c / 2 == 0) iy = (int) Math.floor(yt);
			if (level.getTile(ix, iy).solid()) solid = true;
		}
		return solid;
	}

	// adds particles to the screen
	public void render(Screen screen) {
		Screen.renderSprite((int) xx - 1, (int) yy - (int) zz, sprite, true);
	}

}
